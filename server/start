#!/bin/bash

# Container entry point.
#
# start [UP1 [UP2 ...]] OPT
#   OPT = server - Start parsltets server
#         jupyter - Start singl-user jupyter service
#         wait - Do nothing without exiting
#   UPi is any of
#     update-parsl - updat parsl
#     update-desc-wfmon - Update desc-wfmon
#     update-desc-wfmon - Update desc-wfmon
# start - update server

linkit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    ln -s $FROM $TO
  fi
}

copyit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    cp $FROM $TO
  fi
}

THIS=$(readlink -f $0)
THISDIR=$(dirname $THIS)
THISVER=$(cat $THISDIR/../version.txt)
echo start: Called with args: $*
echo start: desc-prod version $THISVER
OPT=${1:-update}
shift
ARGS="$*"

# Actions to carry out before starting the service.
if [ $# -gt 0 ]; then
  # Update parsl
  if [ $OPT = update ]; then
     OPT=update-parsl
     ARGS="update-desc-wfmon update-desc-prod $ARGS"
  fi
  if [ $OPT = update-parsl ]; then
    echo start: Updating parsl
    pip install parsl@git+https://github.com/parsl/parsl@desc#parsl[monitoring,workqueue]
  # Update desc-wfmon
  elif [ $OPT = update-desc-wfmon ]; then
    echo start: Updating desc-wfmon
    cd /home/descprod/dev/desc-wfmon
    git pull
    pip install .
  # Update desc-prod
  elif [ $OPT = update-desc-prod ]; then
    echo start: Updating desc-prod.
    cd /home/descprod/dev/desc-prod
    git pull
  # Enable SSL with cert and key on local disk.
  elif [ $OPT = ssl ]; then
    echo start: Enabling SSL.
    export USESSL=true
  # Enable SSL with cert and key generated.
  elif [ $OPT = sslgen ]; then
    echo start: Enabling SSL.
    export USESSL=generate
  # Disable SSL.
  elif [ $OPT = nossl ]; then
    echo start: Disabling SSL.
    export USESSL=false
  # Force https in flask callbacks
  elif [ $OPT = 'force-https' ]; then
    echo start: Setting force-https
    export SERVER_OPTS="$SERVER_OPTS force-https"
  # Make server log noisy.
  elif [ $OPT = debug ]; then
    echo start: Setting debug.
    export SERVER_OPTS="$SERVER_OPTS debug"
  else
    echo start: WARNING: Ignoring unknown flag: $OPT
  fi
  cd /home/descprod
  /home/descprod/dev/desc-prod/server/start $ARGS
  exit
fi

# Mount and check data disk.
EXTMNT01=/mnt/dpvol01
HOMDIR=/users
LOGDIR=$HOMDIR/logs
if [ ! -r $HOMDIR ]; then
  if [ -r $EXTMNT01 ]; then
    echo start: Creating $HOMDIR 
    sudo ln -s $EXTMNT01 $HOMDIR
  fi
fi
# Startup config.
if [ ! -r $LOGDIR ]; then
  echo start: Creating log directory: $LOGDIR
  mkdir $LOGDIR
fi
echo $(date): $HOSTNAME >> $LOGDIR/host.log

PKGDIR=$HOME/dev/desc-prod
BINDIR=$HOME/bin
if [ ! -r $BINDIR ]; then
  mkdir $BINDIR
fi
PKGDIR=$HOME/dev/desc-prod
SRCDIR=$PKGDIR/server
linkit $SRCDIR/run-server $BINDIR
linkit $SRCDIR/sfapi $BINDIR
copyit $SRCDIR/setup.sh $HOME
for FIL in l nersc-proxy show-open-ports nersc-proxy descprod-next-jobid descprod-next-sessionid \
           descprod-current-jobid setup-jupyter-job descprod-wrap descprod-adduser; do
  copyit $SRCDIR/$FIL $BINDIR
done
for FIL in descprod-wrap; do
  sudo cp $SRCDIR/$FIL /bin
done
cp -r $SRCDIR/static $HOME
JUPCFGDIR=$HOME/.jupyter
if [ ! -r $JUPCFGDIR ]; then
  mkdir $JUPCFGDIR
fi
copyit $SRCDIR/jupyter_notebook_config.py $JUPCFGDIR

# start the parsltest server
if [ $OPT = server ]; then
  # Mount and configure local disk.
  EXTMNT02=/mnt/dpvol02
  LOCDIR=$HOME/local
  if [ ! -r $LOCDIR ]; then
    if [ -r $EXTMNT02 ]; then
      echo start: Creating $LOCDIR 
      ln -s $EXTMNT02 $LOCDIR
    fi
    SITFIL=$LOCDIR/etc/site.txt
    if [ -r $SITFIL ]; then
      echo start: Site is $(cat $SITFIL)
    else
      echo start: ERROR: Site file not found: $SITFIL
      echo start: Please add this with a shot and unique site name.
    fi
    JIDFIL=$LOCDIR/etc/jobid.txt
    if [ ! -r $JIDFIL* ]; then
      echo start: WARNING: Creating missing job ID file: $JIDFIL
    fi
    echo start: Current/last job ID is $(cat $JIDFIL)
  fi
  # Setup authentications.
  for SUP in google sfapi; do
    SUPFIL=/home/descprod/local/etc/setup_$SUP.sh
    if [ -r $SUPFIL ]; then
      echo Setting up $SUP
      source $SUPFIL
    fi
  done
  if [ -z "$GOOGLE_CLIENT_ID" ]; then
    echo GOOGLE client ID not found
    exit 1
  fi
  if [ -z "$GOOGLE_CLIENT_SECRET" ]; then
    echo GOOGLE client secret not found
    exit 1
  fi
  # Start server.
  echo start: Starting server.
  /home/descprod/dev/desc-prod/server/run-server
  echo start: Server exited.
  exit 0
fi

# start single-user jupyter server
if [ $OPT = jupyter ]; then
  echo start: Starting jupyter.
  /home/descprod/dev/desc-prod/server/run-jupyter
  echo start: Jupyter exited.
  exit 0
fi

# Start rp test.
if [ $OPT = rptest ]; then
  echo starting rp test...
  cd data/dev/materials-flask-google-login
  pip install -r requirements.txt
  while true; do
    echo Running app
    python app.py
    sleep 10
  done
  exit 0
fi

# Keep container open for shell exec.
if [ $OPT = wait ]; then
  echo start: Keeping container open.
  tail -f /dev/null
fi

echo start: Invalid option $OPT. Exiting.
