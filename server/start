#!/bin/bash

# Container entry point.
#
# start [UP1 [UP2 ...]] OPT
#   OPT = server - Start parsltets server
#         jupyter - Start singl-user jupyter service
#         wait - Do nothing without exiting
#   UPi is any of
#     update-parsl - updat parsl
#     update-desc-wfmon - Update desc-wfmon
#     update-desc-wfmon - Update desc-wfmon
# start - update server

linkit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    ln -s $FROM $TO
  fi
}

copyit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    cp $FROM $TO
  fi
}

echo start: Called with args: $*
OPT=${1:-update}
shift

# Update parsl, desc-wfmon and desc-prod and then start the server.
if [ ${OPT:0:6} = update ]; then
  if [ $OPT = update -o $OPT = update-parsl ]; then
    echo start: Updating parsl
    pip install parsl@git+https://github.com/parsl/parsl@desc#parsl[monitoring,workqueue]
  fi
  if [ $OPT = update -o $OPT = update-desc-wfmon ]; then
    echo start: Updating desc-wfmon
    cd /home/descprod/dev/desc-wfmon
    git pull
    pip install .
  fi
  if [ $OPT = update -o $OPT = update-desc-prod ]; then
    echo start: Updating desc-prod.
    cd /home/descprod/dev/desc-prod
    git pull
  fi
  cd /home/descprod
  /home/descprod/dev/desc-prod/server/start $*
fi

# Link external drives.
EXTMNT=/mnt/dpvol01
EXTDIR=$HOME/data
LOGDIR=$EXTDIR/logs
if [ ! -r $EXTDIR ]; then
  if [ -r $EXTMNT ]; then
    echo start: Creating $EXTDIR 
    ln -s $EXTMNT $EXTDIR
  fi
  SITFIL=$EXTDIR/etc/site.txt
  if [ -r $SITFIL ]; then
    echo start: Site is $(cat $SITFIL)
  else
    echo start: ERROR: Site file not found: $SITFIL
    echo start: Please add this with a shot and unique site name.
  fi
  JIDFIL=$EXTDIR/etc/jobid.txt
  if [ ! -r $JIDFIL* ]; then
    echo start: WARNING: Creating missing job ID file: $JIDFIL
  fi
  echo start: Current/last job ID is $(cat $JIDFIL)
fi

# Startup config.
if [ ! -r $LOGDIR ]; then
  echo start: Creating log directory: $LOGDIR
  mkdir $LOGDIR
fi
echo $(date): $HOSTNAME >> $LOGDIR/host.log
PKGDIR=$HOME/dev/desc-prod
BINDIR=$HOME/bin
if [ ! -r $BINDIR ]; then
  mkdir $BINDIR
fi
PKGDIR=$HOME/dev/desc-prod
SRCDIR=$PKGDIR/server
TSTDIR=$PKGDIR/test
linkit $TSTDIR/run-server $BINDIR
for FIL in nersc-proxy show-open-ports nersc-proxy descprod-next-jobid \
           descprod-current-jobid setup-jupyter-job; do
  copyit $SRCDIR/$FIL $BINDIR
done
DATRUNDIR=$HOME/data/rundirs
if [ ! -r $DATRUNDIR ]; then
  mkdir $DATRUNDIR
fi
JUPCFGDIR=$HOME/.jupyter
if [ ! -r $JUPCFGDIR ]; then
  mkdir $JUPCFGDIR
fi
copyit $SRCDIR/jupyter_notebook_config.py $JUPCFGDIR

# start the parsltest server
if [ $OPT = server ]; then
  echo start: Starting server.
  /home/descprod/dev/desc-prod/test/run-server
  echo start: Server exited.
  exit 0
fi

# start single-user jupyter server
if [ $OPT = jupyter ]; then
  echo start: Starting jupyter.
  /home/descprod/dev/desc-prod/server/run-jupyter
  echo start: Jupyter exited.
  exit 0
fi

# Start rp test.
if [ $OPT = rptest ]; then
  echo starting rp test...
  cd data/dev/materials-flask-google-login
  pip install -r requirements.txt
  while true; do
    echo Running app
    python app.py
    sleep 10
  done
  exit 0
fi

# Keep container open for shell exec.
if [ $OPT = wait ]; then
  echo start: Keeping container open.
  tail -f /dev/null
fi

echo start: Invalid option $OPT. Exiting.
