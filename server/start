#!/bin/bash

# Container entry point.
#
# start [UP1 [UP2 ...]] OPT
#   OPT = server - Start descprod server
#         jupyter - Start singl-user jupyter service
#         wait - Do nothing without exiting
#   UPi is any of
#     update-parsl - updat parsl
#     update-desc-wfmon - Update desc-wfmon
#     update-desc-wfmon - Update desc-wfmon
# start - update server

# This script may be called as either descrpod or root.
# Define command prefixes to execute commnds as one or the other.
UNAM=$(whoami)
echo start: Running as user $UNAM
if [ $UNAM = descprod ]; then
  ASROOT="sudo"
  ASDESC=""
elif [ $UNAM = root ]; then
  ASROOT=""
  ASDESC="sudo -u descprod"
fi
  
linkit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    ln -s $FROM $TO
  fi
}

copyit() {
  FROM=$1
  TO=$2/$(basename $FROM)
  if [ ! -r $TO ]; then
    cp $FROM $TO
  fi
}

# Freeze so service manager can start a shell.
freeze() {
  echo start: Freezing...
  tail -f /dev/null
}

THIS=$(readlink -f $0)
THISDIR=$(dirname $THIS)
THISVER=$(descprod-version)
echo start: Called with args: $*
echo start: desc-prod version $THISVER
OPT=${1:-update}
shift
ARGS="$*"

# Actions to carry out before starting the service.
if [ $# -gt 0 ]; then
  if [ $OPT = update ]; then
     OPT=update-desc-prod
  fi
  # Prevent git dubious ownership errors.
  if [ $OPT = 'git-safedir' ]; then
    echo start: Setting git safedir.
    git config --global --add safe.directory '*'
  # Update parsl
  elif [ $OPT = update-parsl ]; then
    echo start: Updating parsl
    pip install parsl@git+https://github.com/parsl/parsl@desc#parsl[monitoring,workqueue]
  # Update desc-wfmon
  elif [ $OPT = update-desc-wfmon ]; then
    echo start: Updating desc-wfmon
    cd /home/descprod/dev/desc-wfmon
    git pull
    pip install .
  # Update desc-prod
  elif [ $OPT = update-desc-prod ]; then
    echo start: Updating desc-prod.
    cd /home/descprod/dev/desc-prod
    echo start: "Version before: $(descprod-version)"
    git pull
    pip install .
    echo start: "Version after: $(descprod-version)"
  # Enable SSL with cert and key on local disk.
  elif [ $OPT = ssl ]; then
    echo start: Enabling SSL.
    export USESSL=true
  # Enable SSL with cert and key generated.
  elif [ $OPT = sslgen ]; then
    echo start: Enabling SSL.
    export USESSL=generate
  # Disable SSL.
  elif [ $OPT = nossl ]; then
    echo start: Disabling SSL.
    export USESSL=false
  # Force https in flask callbacks
  elif [ $OPT = 'force-https' ]; then
    echo start: Setting force-https
    export SERVER_OPTS="$SERVER_OPTS force-https"
  # Make server log noisy.
  elif [ $OPT = debug ]; then
    echo start: Setting debug.
    export SERVER_OPTS="$SERVER_OPTS debug"
  # Start mysql server.
  elif [ ${OPT:0:5} = mysql ]; then
    REM=${OPT:6}
    if [ "$REM" = noaio ]; then
      echo start: Disabling native aio for mysql.
      CNFFILE=/etc/mysql/conf.d/noaio.cnf
      echo '[mysqld]' >$CNFFILE
      echo 'innodb_use_native_aio = 0' >> $CNFFILE
      echo 'innodb_lock_wait_timetout = 120' >> $CNFFILE
    elif [ "$REM" = minup ]; then
      echo start: Configuring mysql with minimal upgrade.
      echo "ExecStart=/usr/sbin/mysqld --upgrade=MINIMAL" >> /usr/lib/systemd/system/mysql.service
    fi
    echo start: Starting mysql server.
    $ASROOT service mysql start
  else
    echo start: WARNING: Ignoring unknown flag: $OPT
  fi
  cd /home/descprod
  if ! /home/descprod/dev/desc-prod/server/start $ARGS; then
    # Not sure why but exit 1 does not bring uss here.
    echo start: ERROR: Start failed with args: $ARGS
    freeze
  fi
  exit
fi

# Mount and check data disk.
EXTMNT01=/mnt/dpvol01
HOMDIR=/users
LOGDIR=$HOMDIR/logs
if [ ! -r $HOMDIR ]; then
  if [ -r $EXTMNT01 ]; then
    echo start: Creating $HOMDIR 
    $ASROOT ln -s $EXTMNT01 $HOMDIR
  else
    echo ERROR: start: Mount not found: $EXTMNT01
    freeze
  fi
fi
# Startup config.
if [ ! -r $LOGDIR ]; then
  echo start: Creating log directory: $LOGDIR
  mkdir $LOGDIR
fi
echo $(date): $HOSTNAME >> $LOGDIR/host.log

if false; then
  # Install ptenv hom 00 if needed.
  if PTDIR=$(ptenv-find hom 00 2>/dev/null); then
    echo start: Found ptenv at $PTDIR
  else
    echo start: Installing ptenv.
    ptenv-create hom 00
    if ! PTDIR=$(ptenv-find hom 00 2>/dev/null); then
      echo start: Installing ptenv again.
      ptenv-create hom 00
    fi
    if PTDIR=$(ptenv-find hom 00 2>/dev/null); then
      echo start: Installed ptenv at $PTDIR
    else
      echo start: ERROR: Installation of ptenv failed.
    fi
  fi
fi
  
  
DESCHOME=/home/descprod
PKGDIR=$DESCHOME/dev/desc-prod
BINDIR=$DESCHOME/bin
if [ ! -r $BINDIR ]; then
  mkdir $BINDIR
fi
PKGDIR=$DESCHOME/dev/desc-prod
SRCDIR=$PKGDIR/server
PATH="$PATH:$SRCDIR/bin"
copyit $SRCDIR/setup.sh $DESCHOME
cp -r $SRCDIR/static $DESCHOME
JUPCFGDIR=$DESCHOME/.jupyter
if [ ! -r $JUPCFGDIR ]; then
  mkdir $JUPCFGDIR
fi
copyit $SRCDIR/jupyter_notebook_config.py $JUPCFGDIR

# start the descprod server
if [ $OPT = server ]; then
  # Mount and configure local disk.
  EXTMNT02=/mnt/dpvol02
  LOCDIR=$DESCHOME/local
  ETCDIR=$LOCDIR/etc
  if [ ! -r $LOCDIR ]; then
    if [ -r $EXTMNT02 ]; then
      echo start: Creating $LOCDIR 
      ln -s $EXTMNT02 $LOCDIR
    fi
    SITFIL=$LOCDIR/etc/site.txt
    if [ -r $SITFIL ]; then
      echo start: Site is $(cat $SITFIL)
    else
      echo start: ERROR: Site file not found: $SITFIL
      echo start: Please add this with a shot and unique site name.
    fi
    JIDFIL=$LOCDIR/etc/jobid.txt
    if [ ! -r $JIDFIL ]; then
      echo start: ERROR: Unable to find $JIDFIL
      echo start: If this is a new server, please create it with:
      echo start:   "echo 0 > $JIDFIL"
      freeze
    fi
    echo start: Current/last job ID is $(cat $JIDFIL)
    # Transfer the new user files. Thes are copied in when a user is added.
    $ASROOT cp $SRCDIR/skel/.bash* /etc/skel
  fi
  # Setup authentications.
  for SUP in google sfapi; do
    SUPFIL=/home/descprod/local/etc/setup_$SUP.sh
    if [ -r $SUPFIL ]; then
      echo start: Setting up $SUP
      source $SUPFIL
    fi
  done
  if [ -z "$GOOGLE_CLIENT_ID" ]; then
    echo start: ERROR: GOOGLE client ID not found
    freeze
  fi
  if [ -z "$GOOGLE_CLIENT_SECRET" ]; then
    echo start: ERROR: GOOGLE client secret not found
    freeze
  fi
  # Start server. Run as the current user.
  echo start: Starting server as $UNAM.
  /home/descprod/dev/desc-prod/server/run-server
  echo start: Server exited.
  exit 0
fi

# start single-user jupyter server
if [ $OPT = jupyter ]; then
  echo start: Starting jupyter.
  /home/descprod/dev/desc-prod/server/run-jupyter
  echo start: Jupyter exited.
  exit 0
fi

# Start rp test.
if [ $OPT = rptest ]; then
  echo start: Starting rp test...
  cd data/dev/materials-flask-google-login
  pip install -r requirements.txt
  while true; do
    echo start: Running app
    python app.py
    sleep 10
  done
  exit 0
fi

# Keep container open for shell exec.
if [ $OPT = wait ]; then
  echo start: Keeping container open.
  tail -f /dev/null
fi

echo start: Invalid option $OPT. Exiting.
