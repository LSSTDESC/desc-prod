#!/bin/bash
#
# ptenv-find
#
# David Adams
# November 2022
#
# Return the directory holding the ptenv conda env for
# a specified file system and version.
# Caller can the setup the env with source DIR/setup.sh
#
# If version is not supplied, then the location of miniconda is
# returned.

DOHELP=
DOTAR=
DOCREATE=
NOCHECK=
LOC=
VER=
while [ $# -gt 0 ]; do
  ARG=$1
  if [ ${ARG:0:1} = '-' ]; then
    FLG=${ARG:1}
    if [ $FLG = h ]; then
      DOHELP=true
    elif [ $FLG = t ]; then
      DOTAR=true
    elif [ $FLG = n ]; then
      NOCHECK=true
    else
      echo ERROR: Invalid flag: $ARG >&2
      exit 1
    fi
  else
    if [ -z "$LOC" ]; then
      LOC=$ARG
    elif [ -z "$VER" ]; then
      VER=$ARG
    else
      echo ERROR: Too many locations: $LOC $LOC $ARG >&2
      exit 1
    fi
  fi
  shift
done

if [ -n "$DOHELP" -o -z "$LOC" ]; then
  echo Usage $(basename $0): [-h] [-t] LOC [VER] >&2
  echo "  -h: Show this message." >&2
  echo "  -t: Return the tar file for for the env." >&2
  echo "  -n: Return the env directory path without checking." >&2
  echo "If -n is not given, try to untar if the env is missing and" >&2
  echo "return the name only if it is found." >&2
  exit 0
fi

PATH=$(dirname $(readlink -f $0)):$PATH

ENVNAM=$(ptenv-name $LOC $VER)
ENVDIR=$(ptenv-dir $LOC)
TARDIR=$(ptenv-dir -t $LOC)
ENVFIL=$ENVDIR/$ENVNAM
TARFIL=$TARDIR/$ENVNAM.tz

if [ -n "$DOTAR" ]; then
  echo $TARFIL
  exit 0
fi

if [ -n "$NOCHECK" ]; then
  echo $ENVFIL
  exit 0
fi

if [ ! -r $ENVFIL ]; then
  if [ -r $TARFIL ]; then
    if [ ! -r $ENVDIR ]; then
      if ! mkdir -p $ENVDIR; then
        echo "ERROR: Unable to create $ENVDIR" >&2
        exit 1
      fi
    fi
    echo "Untarring $TARFIL on $(hostname)" >&2
    if ! tar -xzf $TARFIL -C $ENVDIR; then
      echo "ERROR: Unable to untar $TARFIL in $ENVDIR" >&2
      exit 1
    fi
  else
    echo "Unable to find env or its tar at any of" >&2
    echo "  $ENVFIL" >&2
    echo "  $TARFIL" >&2
    exit 1
  fi
fi

# If directory exists and build is in progress, wait for that build to finish.
FLGFIL=$ENVFIL/build-in-progress
MAXTRY=100
NTRY=0
NLINE=50
TWAIT=1
MAXWAIT=10
while LONGWHEN=$(stat -c '%x' $FLGFIL 2>/dev/null); do
  if [ $NTRY -eq 0 ]; then
    WHEN=$(echo $LONGWHEN | sed s/[.].*//g)
    echo It appears the env build is in progress since $WHEN >&2
    echo Waiting until it completes. >&2
    echo To force exit, remove $FLGFIL >&2
  else
    echo -n . >&2
    if [ $(( (NTRY)%NLINE )) -eq 0 ]; then echo; fi
  fi
  sleep $TWAIT
  NTRY=$(($NTRY+1))
  if [ $TWAIT -lt $MAXWAIT ]; then TWAIT=$(($TWAIT+1)); fi
  if [ $NTRY -gt $MAXTRY ]; then
    echo Giving up. >&2
    exit 1
  fi
done
echo

echo $ENVFIL
exit 0
