#!/usr/bin/env python3

# descprod-wrap
#
# David Adams
# January 2023
#

wver = 18

import sys
import os
import time
import json
import socket
import subprocess
import requests

def get_progress_from_file():
    snam = f"current-status.txt"
    line = ''
    if os.path.isfile(snam):
        with open(snam) as sfil:
            for line in sfil: pass
    return line.strip()

print(f"DESCprod wrapper {sys.argv[0]} version {wver} called with {len(sys.argv)-1} arguments.")

jindent = 2
jsep = (',', ': ')

dohelp = len(sys.argv) > 1 and sys.argv[1] == '-h'
nargexp = [7,8]
doerr = len(sys.argv) not in nargexp
fullthis = sys.argv[0]
this = os.path.basename(fullthis)

if dohelp:
    print(f"Usage: {this} COM RUNDIR LOGFIL STAFIL JOBID DESCNAME SURL")
    print(f"  COM is a shell command line.")
    print(f"  RUNDIR is the directory where the command is run.")
    print(f"  LOGFIL has the stdout and stderr.")
    print(f"  STAFIL has the regularly-updated job config in json fomat.")
    print(f"  JOBID is the job ID.")
    print(f"  DESCNAME is the user name.")
    print(f"  SURL is the server URL. If prsent, updates are sent there.")
    print(f"The wrapper runs until the command completes.")
    print(f"During execution the config holds:")
    print(f"  command - COM")
    print(f"  rundir - RUNDIR")
    print(f"  log_file - LOGFIL")
    print(f"  start_time - Start time")
    print(f"  pid - Process ID")
    print(f"After execution, it has the above plus:")
    print(f"  stop_time - Stop time")
    print(f"  return_status - Command return code")
    exit(0)

if doerr:
    print(f"Invalid arguments ({len(sys.argv)} != {nargexp}):")
    for arg in sys.argv:
        print(f"  {arg}")
    exit(1)

command = sys.argv[1]
rundir = sys.argv[2]
logname = sys.argv[3]
jnam = sys.argv[4]
jobid = int(sys.argv[5])
user = sys.argv[6]
surl = sys.argv[7] if len(sys.argv) > 7 else 'https://www.descprod.org'

if logname[0] != '/': logname = f"{rundir}/{logname}"
if jnam[0] != '/':    jnam    = f"{rundir}/{jnam}"

print(f"Running job {jobid} for user {user} in {rundir} with wrapper version {wver}")
print(f"Wrapper is {fullthis}")
sys.stdout.flush()

nowtime0 = int(time.time())
logfil = open(logname, 'w')
info = {}
info['wrapper_version'] = wver
info['id'] = jobid
info['descname'] = user
info['command'] = command
info['rundir'] = rundir
info['log_file'] = logname
info['start_time'] = nowtime0
info['update_time'] = nowtime0
info['host'] = socket.getfqdn()
pop = subprocess.Popen(command, shell=True, cwd=rundir, stdout=logfil, stderr=logfil)
pid = pop.pid
info['pid'] = pid
with open(jnam, 'w') as jfil:
    json.dump(info, jfil, separators=jsep, indent=jindent)
    jfil.write('\n')
print(f"Config is in {jnam}")
sys.stdout.flush()
wait_time = 10
rc = None
sc = 0
if len(surl):
    url = f"{surl}/update_job"
else:
    sc = 200
while rc is None or sc != 200:
    if rc is None:
        rc = pop.poll()
        nowtime = int(time.time())
        prefix = 'Running'
        sep = '. '
        if rc is not None:
            info['stop_time'] = nowtime
            info['return_status'] = rc
            if rc < 0:
                prefix = f"Process received signal {-rc}"
            elif rc == 124:  # Return code from linux timeout command if it times out
                prefix = f"Timeout"
            elif rc > 0:
                prefix = f"Failed"
            else:
                prefix = f"Done"
        info['update_time'] = nowtime
        progress = f"{prefix}{sep}{get_progress_from_file()}"
        pfil = open('progress.log', 'a')
        pfil.write(f"{int(nowtime-nowtime0):8}: {progress}\n")
        pfil.close()
        if len(progress):
            info['progress'] = progress
        with open(jnam, 'w') as jfil:
            json.dump(info, jfil, separators=jsep, indent=jindent)
            jfil.write('\n')
        print(f"Updated config is in {jnam}")
        sys.stdout.flush()
    if len(url):
        try:
            r = requests.post(url, timeout=10, json={'id':jobid, 'descname':user, 'job':info})
            sc = r.status_code
            if sc != 200:
                print(f"Update of job {user}/{jobid} at {surl} failed with HTML code {sc}")
            else:
                rmap = r.json()
                urc = rmap['status']
                if urc:
                    print(f"Update of job {user}/{jobid} at {surl} failed: {rmap['message']}")
                else:
                    print(f"Updated job {jobid} at {surl}")
        except Exception as e:
            print(f"Unable to reach server at {surl}: {str(e)}")
            sc = 999
        sys.stdout.flush()
    time.sleep(wait_time)
print(f"Done.")
exit(rc)
